I"x<h2 id="零渲染管线概述">零、渲染管线概述</h2>

<p><img src="/img/in-post/ShaderTutor/renderTarget.png" alt="renderTarget" /></p>

<p>Unity Build-in Rendering Pipeline（渲染管线）</p>

<ul>
  <li>CPU应用程序端的渲染逻辑</li>
  <li>GPU渲染管线（Graphic Pipeline）</li>
</ul>

<p><img src="/img/in-post/ShaderTutor/renderpipeline.png" alt="renderpipeline" /></p>

<p>简单点就分为：</p>

<p>CPU应用程序端的渲染逻辑 - 》 GPU渲染管线 - 》 Frame Buffer</p>

<p>CPU应用程序端的渲染逻辑我们简称<strong>应用程序阶段</strong></p>

<p>可分为：</p>

<ul>
  <li>剔除
    <ul>
      <li>视锥体剔除（Frustum Culling）</li>
      <li>层级剔除（Layer Culling Mask）</li>
      <li>遮挡剔除（Occlusion Culling）等</li>
    </ul>
  </li>
  <li>排序
    <ul>
      <li>渲染队列（Render Queue）</li>
      <li>不透明队列（Render Queue &lt; 2500）：按摄像机<strong>从前到后</strong>排序</li>
      <li>半透明队列（Render Queue &gt; 2500）：按摄像机<strong>从后到前</strong>排序</li>
    </ul>
  </li>
  <li>打包数据
    <ul>
      <li>Batch
        <ul>
          <li>模型信息：
            <ul>
              <li>顶点坐标</li>
              <li>法线</li>
              <li>UV纹理坐标</li>
              <li>切线</li>
              <li>顶点色</li>
              <li>索引列表：就是模型顶点的位置</li>
            </ul>
          </li>
          <li>变换矩阵：
            <ul>
              <li>世界变换矩阵</li>
              <li>VP矩阵：根据摄像机位置</li>
              <li>和fov等参数构建</li>
            </ul>
          </li>
          <li>灯光、材质参数：
            <ul>
              <li>Shader</li>
              <li>材质参数</li>
              <li>灯光信息</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>绘制调用：也就是Draw Call</li>
</ul>

<p>我们主要把重点放在<strong>GPU渲染管线</strong>上</p>

<p><img src="/img/in-post/ShaderTutor/renderpipeline2.png" alt="renderpipeline2" /></p>

<p><img src="/img/in-post/ShaderTutor/renderpipeline3.png" alt="renderpipeline3" /></p>

<p>GPU渲染管线可以分为四个内容：</p>

<ul>
  <li><strong>顶点Shader</strong>
    <ul>
      <li>最重要的任务：将顶点坐标从模型空间变换到裁剪空间</li>
      <li>通俗的讲：模拟“拍照”的过程，模拟投影成像的过程，将我们的3D模型进行变形</li>
      <li>通过顶点Shader处理后，相机金字塔状的视锥体被转换变形成一个比例为2 x 2 x 1的立方体（CVV）</li>
      <li>顶点Shader并不会产生2D图像，仅使得场景中的3D对象产生变形效果</li>
      <li><img src="/img/in-post/ShaderTutor/dingdian.png" alt="dingdian" /></li>
    </ul>
  </li>
  <li>
    <p>图元装配及光栅化</p>

    <ul>
      <li><img src="/img/in-post/ShaderTutor/hardware.png" alt="hardware" /></li>
    </ul>
  </li>
  <li><strong>片元处理</strong></li>
  <li>最重要的任务：上色
    <ul>
      <li>纹理技术Texturing
        <ul>
          <li>纹理采样</li>
          <li>纹理过滤机制：就是unity里的过滤模式（Filter Mode）</li>
          <li>Mipmap</li>
          <li>纹理寻址模式：就是unity里的环绕模式（Wrap Mode）</li>
          <li>纹理压缩格式</li>
        </ul>
      </li>
      <li>光照计算Lighting
        <ul>
          <li>光照组成：
            <ul>
              <li>直接光照</li>
              <li>间接光照</li>
            </ul>
          </li>
          <li>光照模型：
            <ul>
              <li>Phone光照模型</li>
              <li>基本框架：
                <ul>
                  <li>Direct Diffuse</li>
                  <li>Direct Specular</li>
                  <li>Indirect Diffuse</li>
                  <li>Indirect Specular</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>输出合并</p>

    <ul>
      <li>最重要的任务：处理遮挡关系、处理半透明混合</li>
      <li>通俗地讲：片元通过重重考验到达像素点位置的过程</li>
      <li>帧缓冲区：Frame Buffer
        <ul>
          <li>颜色缓冲区：Color Buffer</li>
          <li>深度缓冲区：Depth Buffer</li>
          <li>模板缓冲区：Stencil Buffer</li>
        </ul>
      </li>
      <li>深度测试：Depth Test
        <ul>
          <li>深度写入：ZWrite</li>
          <li>深度测试：ZTest</li>
        </ul>
      </li>
      <li>混合：Blending
        <ul>
          <li>从后到前</li>
          <li>关闭ZWirte</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>总结：</p>

<p><img src="/img/in-post/ShaderTutor/FinalRenderPipeline.png" alt="FinalRenderPipeline" /></p>

<h2 id="一消融篇">一、消融篇</h2>

<p>效果：</p>

<p><img src="/img/in-post/ShaderTutor/dissolve.gif" alt="dissolve" /></p>

<p>实现了：</p>

<ul>
  <li>消融</li>
  <li>消融边缘</li>
  <li>shader控制开关1：multi_compile</li>
</ul>

<p>源码：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Burt/1_Dissolve"</span>
<span class="p">{</span>
	<span class="n">Properties</span>
	<span class="p">{</span>
		<span class="n">_MainTex</span><span class="p">(</span><span class="s">"MainTex"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
		<span class="n">_AddColor</span><span class="p">(</span><span class="s">"AddColor"</span><span class="p">,</span><span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
		<span class="p">[</span><span class="n">NoScaleOffset</span><span class="p">]</span><span class="n">_DissolveTex</span><span class="p">(</span><span class="s">"DissolveTex"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
		<span class="p">[</span><span class="n">NoScaleOffset</span><span class="p">]</span><span class="n">_RampTex</span><span class="p">(</span><span class="s">"RampTex"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
		<span class="p">[</span><span class="n">Toggle</span><span class="p">]</span><span class="n">_DissolveEnable</span><span class="p">(</span><span class="s">"DissolveEnable"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
		<span class="n">_ClipAmount</span><span class="p">(</span><span class="s">"ClipAmount"</span><span class="p">,</span><span class="n">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span>
		<span class="n">_EdgeAmount</span><span class="p">(</span><span class="s">"EdgeAmount"</span><span class="p">,</span><span class="n">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1</span>
	<span class="p">}</span>
		<span class="n">SubShader</span>
		<span class="p">{</span>
			<span class="n">Tags</span> <span class="p">{</span> <span class="s">"RenderType"</span> <span class="o">=</span> <span class="s">"Opaque"</span> <span class="p">}</span>
			<span class="n">LOD</span> <span class="mi">100</span>

			<span class="n">Pass</span>
			<span class="p">{</span>
				<span class="n">CGPROGRAM</span>
				<span class="cp">#pragma vertex vert
</span>				<span class="cp">#pragma fragment frag
</span>				
				<span class="c1">//变体，作用类似开关，名字格式：_ Properties的变量名_ON。全大写</span>
				<span class="cp">#pragma multi_compile _ _DISSOLVEENABLE_ON
</span>
				<span class="cp">#include "UnityCG.cginc"
</span>
				<span class="k">struct</span> <span class="n">appdata</span>
				<span class="p">{</span>
					<span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
					<span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
				<span class="p">};</span>

				<span class="k">struct</span> <span class="n">v2f</span>
				<span class="p">{</span>
					<span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
					<span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
				<span class="p">};</span>

				<span class="kt">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
				<span class="n">float4</span> <span class="n">_MainTex_ST</span><span class="p">;</span>
				<span class="kt">sampler2D</span> <span class="n">_DissolveTex</span><span class="p">;</span>
				<span class="n">sampler</span> <span class="n">_RampTex</span><span class="p">;</span>
				<span class="n">float4</span> <span class="n">_AddColor</span><span class="p">;</span>
				<span class="kt">float</span> <span class="n">_ClipAmount</span><span class="p">;</span>
				<span class="kt">float</span> <span class="n">_EdgeAmount</span><span class="p">;</span>

				<span class="n">v2f</span> <span class="n">vert</span><span class="p">(</span><span class="n">appdata</span> <span class="n">v</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">v2f</span> <span class="n">o</span><span class="p">;</span>
					<span class="n">o</span><span class="p">.</span><span class="n">vertex</span> <span class="o">=</span> <span class="n">UnityObjectToClipPos</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
					<span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">TRANSFORM_TEX</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span> <span class="n">_MainTex</span><span class="p">);</span>
					<span class="c1">//相当于：o.uv = v.uv * _MainTex_ST.xy + _MainTex_ST.zw;</span>
					<span class="k">return</span> <span class="n">o</span><span class="p">;</span>
				<span class="p">}</span>

				<span class="n">fixed4</span> <span class="n">frag</span><span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
				<span class="p">{</span>
					<span class="c1">//sample the texture</span>
					<span class="n">fixed4</span> <span class="n">col</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">);</span>
					<span class="n">fixed4</span> <span class="n">dis</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_DissolveTex</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">);</span>
					
					<span class="n">col</span> <span class="o">+=</span> <span class="n">_AddColor</span><span class="p">;</span>
					
					<span class="c1">//在这里判断要不要打开</span>
					<span class="cp">#if _DISSOLVEENABLE_ON	
</span>						<span class="n">clip</span><span class="p">(</span><span class="n">dis</span><span class="p">.</span><span class="n">r</span> <span class="o">-</span> <span class="n">_ClipAmount</span><span class="p">);</span>
						<span class="c1">//小于0剔除，大于0不剔除.难以理解就想想现在这里是单个像素</span>

						<span class="kr">fixed</span> <span class="n">disValue</span> <span class="o">=</span> <span class="n">saturate</span><span class="p">((</span><span class="n">dis</span><span class="p">.</span><span class="n">r</span> <span class="o">-</span> <span class="n">_ClipAmount</span><span class="p">)</span> <span class="o">/</span> <span class="n">_EdgeAmount</span><span class="p">);</span>
						<span class="c1">//此处是smoothstep方法的一部分</span>
						
						<span class="n">fixed4</span> <span class="n">ramp</span> <span class="o">=</span> <span class="n">tex1D</span><span class="p">(</span><span class="n">_RampTex</span><span class="p">,</span> <span class="n">disValue</span><span class="p">);</span>
						<span class="c1">//优化：</span>
						<span class="c1">//1、saturate取代smoothstep是因为saturate够用，而smoothstep比saturate费	</span>
						<span class="c1">//2、只要RampTex的x坐标，不用y坐标，所以1D</span>

						<span class="c1">//之前出现模型泛白bug是因为RampTex的wrap mode是repeat，改成clamp就没事了</span>
						<span class="n">col</span> <span class="o">+=</span> <span class="n">ramp</span><span class="p">;</span>
					<span class="cp">#endif
</span>						
					<span class="k">return</span> <span class="n">col</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="n">ENDCG</span>
			<span class="p">}</span>
		<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>1、方法</p>

<ul>
  <li>clip()：小于0剔除，大于0不剔除</li>
  <li>saturate()：小于0返回0，大于1返回1，0~1之间则返回本身。注意：参数只有一个</li>
  <li>multi_compile _ 变量名_ON：全大写，注意第一个下划线后有一个空格</li>
  <li>smoothstep()：saturate()的平滑过渡版，平滑程度基于第三个值</li>
</ul>

<p>2、优化</p>

<ul>
  <li>由于RampTex只用到x方向，所以为了减少计算量，用tex1D方法</li>
  <li>smoothstep()的柔滑曲线效果在这里作用不大，但是很耗资源，所以改用saturate</li>
</ul>

<h2 id="二透明混合篇">二、透明混合篇</h2>

<p>效果：</p>

<p><img src="/img/in-post/ShaderTutor/EffectUV.gif" alt="EffectUV" /></p>

<p>实现了：</p>

<ul>
  <li>透明</li>
  <li>遮罩</li>
  <li>扰动</li>
  <li>shader控制开关2：shader_feature</li>
  <li>时间控制</li>
</ul>

<p>源码：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Burt/2_EffectUV"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
       <span class="p">[</span><span class="n">Header</span><span class="p">(</span><span class="n">RenderMode</span><span class="p">)]</span>
       <span class="p">[</span><span class="n">Enum</span><span class="p">(</span><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Rendering</span><span class="p">.</span><span class="n">BlendMode</span><span class="p">)]</span><span class="n">_SrcBlend</span><span class="p">(</span><span class="s">"ScrBlend"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="p">[</span><span class="n">Enum</span><span class="p">(</span><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Rendering</span><span class="p">.</span><span class="n">BlendMode</span><span class="p">)]</span><span class="n">_DrcBlend</span><span class="p">(</span><span class="s">"DcrBlend"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="p">[</span><span class="n">Enum</span><span class="p">(</span><span class="n">UnityEngine</span><span class="p">.</span><span class="n">Rendering</span><span class="p">.</span><span class="n">CullMode</span><span class="p">)]</span><span class="n">_Cull</span><span class="p">(</span><span class="s">"Cull"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
 
       <span class="p">[</span><span class="n">Header</span><span class="p">(</span><span class="n">MainTexture</span><span class="p">)]</span>
       <span class="n">_MainTex</span><span class="p">(</span><span class="s">"MainTex"</span><span class="p">,</span><span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
       <span class="n">_UVSpeedX</span><span class="p">(</span><span class="s">"UVSpeedX"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="n">_UVSpeedY</span><span class="p">(</span><span class="s">"UVSpeedY"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>

       <span class="p">[</span><span class="n">Header</span><span class="p">(</span><span class="n">Mask</span><span class="p">)]</span>
       <span class="p">[</span><span class="n">Toggle</span><span class="p">(</span><span class="n">MASKENABlE</span><span class="p">)]</span><span class="n">_MaskEnable</span><span class="p">(</span><span class="s">"MaskEnable"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="n">_MaskTex</span><span class="p">(</span><span class="s">"MaskTex"</span><span class="p">,</span><span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
       <span class="n">_MaskSpeedX</span><span class="p">(</span><span class="s">"MaskSpeedX"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="n">_MaskSpeedY</span><span class="p">(</span><span class="s">"MaskSpeedY"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>

       <span class="p">[</span><span class="n">Header</span><span class="p">(</span><span class="n">Distort</span><span class="p">)]</span>
       <span class="p">[</span><span class="n">Toggle</span><span class="p">(</span><span class="n">DISTORTENABlE</span><span class="p">)]</span><span class="n">_DistortEnable</span><span class="p">(</span><span class="s">"DistortEnable"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="n">_DistortTex</span><span class="p">(</span><span class="s">"DistortTex"</span><span class="p">,</span><span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
       <span class="n">_Distort</span><span class="p">(</span><span class="s">"Distort"</span><span class="p">,</span><span class="n">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="n">_DistortSpeedX</span><span class="p">(</span><span class="s">"DistortSpeedX"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
       <span class="n">_DistortSpeedY</span><span class="p">(</span><span class="s">"DistortSpeedY"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>

       <span class="p">[</span><span class="n">Header</span><span class="p">(</span><span class="n">OtherSetting</span><span class="p">)]</span>
       <span class="n">_AddColor</span><span class="p">(</span><span class="s">"AddColor"</span><span class="p">,</span><span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
       <span class="n">_Instensity</span><span class="p">(</span><span class="s">"Intensity"</span><span class="p">,</span><span class="n">Range</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="o">=</span> <span class="mi">1</span>


    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span> <span class="s">"RenderType"</span><span class="o">=</span><span class="s">"Transparent"</span> <span class="s">"Queue"</span> <span class="o">=</span> <span class="s">"Transparent"</span><span class="p">}</span>

        <span class="n">Blend</span> <span class="p">[</span><span class="n">_SrcBlend</span><span class="p">]</span> <span class="p">[</span><span class="n">_DrcBlend</span><span class="p">]</span>
        <span class="n">Cull</span> <span class="p">[</span><span class="n">_Cull</span><span class="p">]</span>

        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="n">CGPROGRAM</span>
            <span class="cp">#pragma vertex vert
</span>            <span class="cp">#pragma fragment frag
</span>
            <span class="cp">#pragma shader_feature DISTORTENABlE
</span>            <span class="cp">#pragma shader_feature MASKENABlE
</span>
            <span class="cp">#include "UnityCG.cginc"
</span>
            <span class="k">struct</span> <span class="n">appdata</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="k">struct</span> <span class="n">v2f</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">uv2</span> <span class="o">:</span> <span class="n">TEXCOORD1</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="kr">half</span> <span class="n">_DistortEnable</span><span class="p">,</span><span class="n">_MaskEnable</span><span class="p">;</span>
            <span class="kt">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span> <span class="n">float4</span> <span class="n">_MainTex_ST</span><span class="p">;</span>
            <span class="kt">sampler2D</span> <span class="n">_MaskTex</span><span class="p">;</span> <span class="n">float4</span> <span class="n">_MaskTex_ST</span><span class="p">;</span>
            <span class="kt">sampler2D</span> <span class="n">_DistortTex</span><span class="p">;</span> <span class="n">float4</span> <span class="n">_DistortTex_ST</span><span class="p">;</span>

            <span class="kt">float</span> <span class="n">_UVSpeedX</span><span class="p">,</span><span class="n">_UVSpeedY</span><span class="p">,</span><span class="n">_MaskSpeedX</span><span class="p">,</span><span class="n">_MaskSpeedY</span><span class="p">,</span><span class="n">_DistortSpeedX</span><span class="p">,</span><span class="n">_DistortSpeedY</span><span class="p">;</span>

            <span class="n">fixed4</span> <span class="n">_AddColor</span><span class="p">;</span>
            <span class="kr">half</span> <span class="n">_Instensity</span><span class="p">;</span>
            <span class="kr">half</span> <span class="n">_Distort</span><span class="p">;</span>


            <span class="n">v2f</span> <span class="n">vert</span> <span class="p">(</span><span class="n">appdata</span> <span class="n">v</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">v2f</span> <span class="n">o</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">vertex</span> <span class="o">=</span> <span class="n">UnityObjectToClipPos</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">xy</span> <span class="o">=</span> <span class="n">TRANSFORM_TEX</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span><span class="n">_MainTex</span><span class="p">)</span> <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="n">_UVSpeedX</span><span class="p">,</span><span class="n">_UVSpeedY</span><span class="p">)</span> <span class="o">*</span> <span class="n">_Time</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
                
                <span class="cp">#if MASKENABlE
</span>                    <span class="n">o</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">zw</span> <span class="o">=</span> <span class="n">TRANSFORM_TEX</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span><span class="n">_MaskTex</span><span class="p">)</span> 
                                <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="n">_MaskSpeedX</span><span class="p">,</span><span class="n">_MaskSpeedY</span><span class="p">)</span> <span class="o">*</span> <span class="n">_Time</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
                <span class="cp">#endif
</span>
                <span class="cp">#if DISTORTENABlE
</span>                    <span class="n">o</span><span class="p">.</span><span class="n">uv2</span> <span class="o">=</span> <span class="n">TRANSFORM_TEX</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span><span class="n">_DistortTex</span><span class="p">)</span> 
                                <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="n">_DistortSpeedX</span><span class="p">,</span><span class="n">_DistortSpeedY</span><span class="p">)</span> <span class="o">*</span> <span class="n">_Time</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
                <span class="cp">#endif
</span>
                <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">fixed4</span> <span class="n">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
            <span class="p">{</span>
                <span class="n">fixed2</span> <span class="n">disScale</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>

                <span class="cp">#if DISTORTENABlE
</span>                    <span class="n">fixed4</span> <span class="n">disTex</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_DistortTex</span><span class="p">,</span><span class="n">i</span><span class="p">.</span><span class="n">uv2</span><span class="p">);</span>
                    <span class="n">disScale</span> <span class="o">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">xy</span><span class="p">,</span><span class="n">disTex</span><span class="p">,</span><span class="n">_Distort</span><span class="p">);</span>
                <span class="cp">#endif
</span>
                <span class="n">fixed4</span> <span class="n">col</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span><span class="n">disScale</span><span class="p">);</span>
                <span class="n">col</span> <span class="o">*=</span> <span class="n">_AddColor</span> <span class="o">*</span> <span class="n">_Instensity</span><span class="p">;</span>

                <span class="cp">#if MASKENABlE
</span>                    <span class="n">fixed4</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_MaskTex</span><span class="p">,</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">.</span><span class="n">zw</span><span class="p">);</span>
                    <span class="n">col</span> <span class="o">*=</span> <span class="n">mask</span><span class="p">;</span>
                <span class="cp">#endif
</span>
      
                <span class="k">return</span> <span class="n">col</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ENDCG</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>思路：</p>

<ul>
  <li>遮罩实现：首先打开blend，一般是 one one。mask图一般是黑白图，和主图融合，黑的地方就带走没了，白的地方保留，白与黑之间的灰就变成透明</li>
  <li>扰动：先读取扰动图，然后定义disScale变量（作为主图的uv），赋值给disScale<strong>原uv和扰动图之间</strong>的<strong>lerp值</strong></li>
  <li>shader_feature：和multi_compile大同小异</li>
  <li>时间控制：_Time.xyzw：
    <ul>
      <li>x：t /20</li>
      <li>y：t</li>
      <li>z：t * 2</li>
      <li>w：t * 3</li>
    </ul>
  </li>
</ul>

<p>shader_feature和multi_compile的区别：</p>

<p>使用multi_compile，是可以在运行时（真机上）用EnableKeyword和DisableKeyword动态改变材质，而shader_feature不行</p>

<p>shader_feature适合在材质中设置，而multi_compile 适合用代码全局设置</p>

<h2 id="三屏幕uv篇">三、屏幕UV篇</h2>

<p>效果：</p>

<p><img src="/img/in-post/ShaderTutor/ScreenUV.gif" alt="ScreenUV" /></p>

<p>实现了：</p>

<ul>
  <li>屏幕UV及优化</li>
  <li>屏幕抓取</li>
</ul>

<p>源码：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Burt/3_ScreenUVDsitort"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_DistortTex</span> <span class="p">(</span><span class="s">"DistortTex"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
        <span class="p">[</span><span class="n">Toggle</span><span class="p">(</span><span class="n">DISTORT</span><span class="p">)]</span><span class="n">_DistortEnable</span><span class="p">(</span><span class="s">"DistortEnable"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">_Distort</span><span class="p">(</span><span class="s">"Distort"</span><span class="p">,</span><span class="n">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">_DistortSpeedX</span><span class="p">(</span><span class="s">"DistortSpeedX"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">_DistortSpeedY</span><span class="p">(</span><span class="s">"DistortSpeedY"</span><span class="p">,</span><span class="kt">float</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="p">[</span><span class="n">Toggle</span><span class="p">(</span><span class="n">REVERSE</span><span class="p">)]</span><span class="n">_ReverseEnable</span><span class="p">(</span><span class="s">"ReverseEnable"</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span> <span class="s">"Queue"</span> <span class="o">=</span> <span class="s">"Transparent"</span> <span class="p">}</span>

        <span class="c1">//抓取屏幕，要定义名字，不然每多一个材质多一个GrabPass</span>
        <span class="n">GrabPass</span><span class="p">{</span><span class="s">"_GrabTex"</span><span class="p">}</span>

        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="n">CGPROGRAM</span>
            <span class="cp">#pragma vertex vert
</span>            <span class="cp">#pragma fragment frag
</span>
            <span class="cp">#pragma shader_feature DISTORT
</span>            <span class="cp">#pragma shader_feature REVERSE
</span>
            <span class="cp">#include "UnityCG.cginc"
</span>
            <span class="k">struct</span> <span class="n">appdata</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="k">struct</span> <span class="n">v2f</span>
            <span class="p">{</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">pos</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">screenUV</span> <span class="o">:</span><span class="n">TEXCOORD1</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="kt">sampler2D</span> <span class="n">_DistortTex</span><span class="p">,</span><span class="n">_GrabTex</span><span class="p">;</span><span class="c1">//要和GrabPass定义的名字一样</span>
            <span class="n">float4</span> <span class="n">_DistortTex_ST</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">_Distort</span><span class="p">,</span><span class="n">_DistortSpeedX</span><span class="p">,</span><span class="n">_DistortSpeedY</span><span class="p">;</span>
            
            <span class="kr">half</span> <span class="n">_DistortEnable</span><span class="p">,</span><span class="n">_ReverseEnable</span><span class="p">;</span>

            <span class="n">v2f</span> <span class="n">vert</span> <span class="p">(</span><span class="n">appdata</span> <span class="n">v</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">v2f</span> <span class="n">o</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">UnityObjectToClipPos</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">screenUV</span> <span class="o">=</span> <span class="n">ComputeScreenPos</span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="n">pos</span><span class="p">);</span><span class="c1">//屏幕坐标通过这个方法获取</span>

                <span class="cp">#if DISTORT
</span>                    <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">TRANSFORM_TEX</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span><span class="n">_DistortTex</span><span class="p">)</span> 
                            <span class="o">+</span> <span class="n">float2</span><span class="p">(</span><span class="n">_DistortSpeedX</span><span class="p">,</span><span class="n">_DistortSpeedY</span><span class="p">)</span> <span class="o">*</span> <span class="n">_Time</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
                <span class="cp">#endif
</span>                <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">fixed4</span> <span class="n">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
            <span class="p">{</span>
                <span class="c1">//最简屏幕坐标代码。_ScreenParams是屏幕分辨率</span>
                <span class="c1">//fixed2 screen = i.pos.xy / _ScreenParams.xy;</span>
                <span class="c1">//fixed2 disScale = screen;</span>

                <span class="n">fixed4</span> <span class="n">disScale</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">screenUV</span><span class="p">;</span>

                <span class="cp">#if DISTORT
</span>                    <span class="n">float4</span> <span class="n">disTex</span> <span class="o">=</span> <span class="n">tex2D</span><span class="p">(</span><span class="n">_DistortTex</span><span class="p">,</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">);</span>
                    <span class="n">disScale</span> <span class="o">=</span> <span class="n">lerp</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">screenUV</span><span class="p">,</span><span class="n">disTex</span><span class="p">,</span><span class="n">_Distort</span><span class="p">);</span>
                    <span class="c1">//假如使用最简屏幕坐标，这里lerp第一个参数要改成screen</span>
                <span class="cp">#endif
</span>
                <span class="c1">//最简屏幕坐标代码</span>
                <span class="c1">//float4 grab = tex2D(_GrabTex,disScale);</span>
                <span class="n">float4</span> <span class="n">grab</span> <span class="o">=</span> <span class="n">tex2Dproj</span><span class="p">(</span><span class="n">_GrabTex</span><span class="p">,</span><span class="n">disScale</span><span class="p">);</span><span class="c1">//投影贴图采样</span>

                <span class="cp">#if REVERSE
</span>                    <span class="n">grab</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">grab</span><span class="p">;</span>
                <span class="cp">#endif
</span>
                <span class="k">return</span> <span class="n">grab</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ENDCG</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>方法及参数：</p>

<ul>
  <li>GrabPass</li>
  <li>ComputeScreenPos()</li>
  <li>tex2Dproj()</li>
  <li>_ScreenParams</li>
</ul>

<p>tex2Dproj和tex2D的区别：</p>

<p>tex2Dproj和tex2D这两个功能几乎相同。</p>

<p>唯一的区别是，在对纹理进行采样之前，<code class="language-plaintext highlighter-rouge">tex2Dproj</code>将输入的UV <code class="language-plaintext highlighter-rouge">xy</code>坐标除以其<code class="language-plaintext highlighter-rouge">w</code>坐标。这是将坐标从正交投影转换为透视投影。</p>

<p><strong>具体什么情况下使用tex2Dproj呢?</strong></p>

<p>我们知道,裁剪空间的坐标经过缩放和偏移后就变成了(0,ｗ),而当分量除以分量W以后,就变成了(0,1),这样在计算需要返回(0,1)值的时候,就可以直接使用tex2Dproj了.</p>

<p>Reference：<strong>https://zhuanlan.zhihu.com/p/107627483</strong></p>

<p>最简屏幕坐标：</p>

<p>顶点函数（此时顶点是在裁剪空间下）传递到片元函数的<strong>顶点</strong>，假如在片元函数直接用，会被引擎或者硬件直接变成屏幕上的像素坐标，可以利用这个特性达成<strong>最简屏幕坐标</strong></p>

<h2 id="四ui">四、UI</h2>

<p>PerRendererData：被他标签的属性在属性面板就看不到了，只能通过代码动态修改。他是配合setPropertyBlock()方法使用的，用于：想要A和B同样材质，分别不同属性的场景上，而且此操作会大大降低消耗</p>

<h2 id="五渲染路径">五、渲染路径</h2>

<ul>
  <li>前向渲染路径(Forward Rendering Path)
    <ul>
      <li>特点：一个物体在受到多个灯光影响时，可能会产生一个或者多个Pass，具体取决于多个因素</li>
      <li>渲染方式：最亮的一盏平行灯和标记为Important的灯采用逐像素；一个灯被标记为Not Important，则这个灯采用逐顶点或者SH球谐；如果产生逐像素的灯数量小于工程中的像素灯数量的话，则会有更多的灯采用逐像素
        <ul>
          <li>逐像素</li>
          <li>逐顶点</li>
          <li>SH球谐函数</li>
        </ul>
      </li>
      <li>ForwardBase：仅用于一个<strong>逐像素</strong>的<strong>平行灯</strong>，以及所有的<strong>逐顶点</strong>与<strong>SH</strong></li>
      <li>ForwardAdd： 用于<strong>其他所有的逐像素</strong>灯</li>
    </ul>
  </li>
  <li>延迟渲染路径(Deferred Rendering Path)：将着色计算进行延后处理的一种渲染方式
    <ul>
      <li>几何处理G-Buffer Pass：以下所有信息都会被存到几何缓冲区(G-Buffer)
        <ul>
          <li>RT0：ARGB32:Diffuse Color(RGB),Occlusion(A)</li>
          <li>RT1：ARGB32:Specular Color(RGB),Roughness(A)</li>
          <li>RT2：ARGB2101010:World Space Normal(RGB),Unused(A)</li>
          <li>RT3：ARGB2101010(non-HDR) or ARGBHALF(HDR):Emission + Lighting + Lightmap + Reflection Probe</li>
          <li>RT4：ARGB32:Light Occlusion</li>
          <li>Depth + Stencil Buffer</li>
        </ul>
      </li>
      <li>光照处理Lighting Pass：只需渲染出一个屏幕大小的二维矩形，使用第一步在G-Buffer中存储的数据对此矩阵的每一个片段进行计算光照</li>
      <li>优点：
        <ol>
          <li>影响一个物体的光源数量是没有限制的</li>
          <li>每一个光源都是逐像素级别的效果，并且可以正确的计算法线贴图及阴影</li>
        </ol>
      </li>
      <li>缺点：
        <ol>
          <li>不支持抗锯齿</li>
          <li>不支持半透明效果</li>
          <li>不支持正交相机</li>
          <li>内存开销较大</li>
        </ol>
      </li>
      <li>支持条件：
        <ol>
          <li>显卡必须支持Multiple Render Targets(MRT)，即多渲染目标</li>
          <li>ShaderModel在3.0及以上</li>
          <li>手机平台在OpenGL3.0及以上</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>顶点照明渲染路径(Vertex Lit Rendering Path,legacy)
    <ul>
      <li>优点
        <ol>
          <li>性能最优</li>
          <li>支持的硬件最广</li>
          <li>一个物体仅仅渲染一次，并且所有的光照计算都在顶点执行</li>
        </ol>
      </li>
      <li>缺点
        <ol>
          <li>不支持像素级别的效果，比如阴影、高质量高光等</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>旧的延迟渲染路径(Deferred Rendering Path,legacy)</li>
</ul>

<p><img src="/img/in-post/ShaderTutor/rengdererPath.png" alt="rengdererPath" /></p>

<p>Tags{ “LightMode” = “XXX” }</p>

<ul>
  <li>Always：默认设置，任何情况下都会渲染，没有灯光信息</li>
  <li>ForwardBase：前向渲染中的基础Pass</li>
  <li>ForwardAdd：前向渲染中的额外Pass</li>
  <li>Dederred：延迟渲染</li>
  <li>ShadowCaster：渲染对象的shadowmap或者depthTexture</li>
  <li>MotionVectors：用于计算物体的MotionVectors</li>
  <li>PrepassBase：用于旧的延迟渲染</li>
  <li>PrepassFinal：用于旧的延迟渲染</li>
  <li>Vertex：用于顶点光照渲染（当物体没有光照贴图时）</li>
  <li>VertexLMRGBM：用于顶点光照渲染（PC与主机平台下，当物体有光照的时候）</li>
</ul>

<h2 id="六深度测试">六、深度测试</h2>

<ul>
  <li>从3D投影为2D，变换后的Z值就成了深度信息</li>
  <li>每个顶点的深度信息，在光栅化阶段会被插值，并写入到深度缓冲中（如果开启了深度写入的话）</li>
</ul>

<h2 id="七纹理">七、纹理</h2>

<p><strong>1、分类</strong></p>

<ul>
  <li>颜色纹理：一维纹理、二维纹理、三维纹理、立方体纹理</li>
  <li>几何纹理：凹凸纹理、视差纹理、置换纹理、法线纹理</li>
</ul>

<p><strong>2、纹理管线</strong></p>

<p><img src="/img/in-post/ShaderTutor/textureLine.png" alt="textureLine" /></p>

<p><strong>3、纹理作用</strong></p>

<p>颜色、高光、透明、凹凸</p>

<p><strong>4、Mipmap</strong></p>

<p>可以理解为纹理的LOD</p>

<p><img src="/img/in-post/ShaderTutor/mipmapSetting.png" alt="mipmapSetting" /></p>

<p>开启后，会生成不同层次贴图根据距离远近使用</p>

<p><img src="/img/in-post/ShaderTutor/mipmap.png" alt="mipmap" /></p>

<p>缺点：</p>

<p>开启后，引擎会将这些图一起打包进显存，所以这张图在显存的里的大小就多了30%。</p>

<p>比如你的图1m，那么打包进显存的图就有1.3m</p>

<p>优点：</p>

<ul>
  <li>增加缓存命中率，减少像素抖动感（因为相机离得远，模型太小，uv不好确定）</li>
  <li>可配合质量设置来分级加载，减少不同配置下的内存</li>
</ul>

<p>shader开启mipmap：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Burt/10_Mipmap"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_MainTex</span> <span class="p">(</span><span class="s">"Texture"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
        <span class="p">[</span><span class="n">IntRange</span><span class="p">]</span><span class="n">_MipmapRange</span><span class="p">(</span><span class="s">"MipmapRange"</span><span class="p">,</span><span class="n">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span> <span class="s">"RenderType"</span><span class="o">=</span><span class="s">"Opaque"</span> <span class="p">}</span>
        <span class="n">LOD</span> <span class="mi">100</span>

        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="n">CGPROGRAM</span>
            <span class="cp">#pragma vertex vert
</span>            <span class="cp">#pragma fragment frag
</span>
            <span class="cp">#include "UnityCG.cginc"
</span>
            <span class="k">struct</span> <span class="n">appdata</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="k">struct</span> <span class="n">v2f</span>
            <span class="p">{</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
            <span class="p">};</span>

            <span class="kt">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span> <span class="n">float4</span> <span class="n">_MainTex_ST</span><span class="p">;</span>
            <span class="kr">half</span> <span class="n">_MipmapRange</span><span class="p">;</span>

            <span class="n">v2f</span> <span class="n">vert</span> <span class="p">(</span><span class="n">appdata</span> <span class="n">v</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">v2f</span> <span class="n">o</span><span class="p">;</span>
                <span class="n">o</span><span class="p">.</span><span class="n">vertex</span> <span class="o">=</span> <span class="n">UnityObjectToClipPos</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">TRANSFORM_TEX</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span> <span class="n">_MainTex</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">fixed4</span> <span class="n">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
            <span class="p">{</span>

                <span class="n">fixed4</span> <span class="n">mipmapUV</span> <span class="o">=</span> <span class="n">fixed4</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">_MipmapRange</span><span class="p">);</span>
                <span class="n">fixed4</span> <span class="n">col</span> <span class="o">=</span> <span class="n">tex2Dlod</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span> <span class="n">mipmapUV</span><span class="p">);</span>
                <span class="k">return</span> <span class="n">col</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">ENDCG</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>5、纹理过滤</strong></p>

<p>事实上没有一个纹理上的纹素是与屏幕上的像素是一一对应的</p>

<p><img src="/img/in-post/ShaderTutor/textureFilter.png" alt="textureFilter" /></p>

<ul>
  <li>Point(no filter)：不进行过滤，只采样离采样点最近的那一个纹素
    <ul>
      <li><img src="/img/in-post/ShaderTutor/noFilter.png" alt="noFilter" /></li>
    </ul>
  </li>
  <li>Bilinear：双线性过滤。在采样点周围采样4个纹素，并进行加权平均得出最后的值（离采样点越近的纹素权重越高）
    <ul>
      <li><img src="/img/in-post/ShaderTutor/BilinearFilter.png" alt="BilinearFilter" /></li>
    </ul>
  </li>
  <li>Trilinear：三线性过滤。在双线性过滤的基础上再加上对Mipmap的远近级别过滤。采样八个纹素，然后进行插值</li>
</ul>

<p><strong>6、纹理的环绕模式</strong></p>

<p><img src="/img/in-post/ShaderTutor/WrapMode.png" alt="WrapMode" /></p>

<p>我们也可以在shader里面自己定义环绕模式：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fixed4</span> <span class="nf">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
<span class="p">{</span>
	<span class="cp">#if _WRAPMODE_REPEAT
</span>		<span class="n">i</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">frac</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">);</span>
	<span class="cp">#elif _WRAPMODE_CLAMP
</span>    	<span class="c1">//方法一</span>
    	<span class="c1">//i.uv = clamp(i.uv,0,1);</span>
    	<span class="c1">//方法二</span>
    	<span class="n">i</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">saturate</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">);</span>
	<span class="cp">#endif
</span>
	<span class="n">fixed4</span> <span class="n">mipmapUV</span> <span class="o">=</span> <span class="n">fixed4</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">uv</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">_MipmapRange</span><span class="p">);</span>
	<span class="n">fixed4</span> <span class="n">col</span> <span class="o">=</span> <span class="n">tex2Dlod</span><span class="p">(</span><span class="n">_MainTex</span><span class="p">,</span><span class="n">mipmapUV</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">col</span><span class="p">;</span>
<span class="err">}</span>
</code></pre></div></div>

<p><strong>6、立方体纹理（Cubemap）</strong></p>

<p>两种生成方式：</p>

<ul>
  <li><img src="/img/in-post/ShaderTutor/cubemap1.png" alt="cubemap1" /></li>
  <li><img src="/img/in-post/ShaderTutor/cubemap2.png" alt="cubemap2" /></li>
</ul>

<p>采样方式：</p>

<p><img src="/img/in-post/ShaderTutor/cubemap3.png" alt="cubemap3" /></p>

<p>环境映射：</p>

<p><img src="/img/in-post/ShaderTutor/cubemap4.png" alt="cubemap4" /></p>

<p>核心代码：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Properties</span>
<span class="p">{</span>
        <span class="n">_Cubemap</span><span class="p">(</span><span class="s">"Cubemap"</span><span class="p">,</span><span class="n">Cube</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span><span class="p">{}</span>
<span class="p">}</span>

<span class="n">samplerCUBE</span> <span class="n">_Cubemap</span><span class="p">;</span>

<span class="n">fixed4</span> <span class="nf">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
<span class="p">{</span>
	<span class="c1">//Cubemap映射</span>
	<span class="n">fixed3</span> <span class="n">N</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">worldNormal</span><span class="p">);</span>
	<span class="n">fixed3</span> <span class="n">V</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">UnityWorldSpaceViewDir</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">worldPos</span><span class="p">));</span>

	<span class="n">fixed3</span> <span class="n">R</span> <span class="o">=</span> <span class="n">reflect</span><span class="p">(</span><span class="o">-</span><span class="n">V</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>

	<span class="n">col</span> <span class="o">=</span> <span class="n">texCUBE</span><span class="p">(</span><span class="n">_Cubemap</span><span class="p">,</span><span class="n">R</span><span class="p">);</span>

	<span class="k">return</span> <span class="n">col</span><span class="p">;</span>
<span class="err">}</span>
</code></pre></div></div>

<p>对反射探针的支持：</p>

<p>首先反射探针烘焙出来，记得要烘焙进的对象要设置为Static</p>

<p>然后就是shader支持：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fixed4</span> <span class="nf">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
<span class="p">{</span>
	<span class="c1">//Cubemap映射</span>
	<span class="n">fixed3</span> <span class="n">N</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">worldNormal</span><span class="p">);</span>
	<span class="n">fixed3</span> <span class="n">V</span> <span class="o">=</span> <span class="n">normalize</span><span class="p">(</span><span class="n">UnityWorldSpaceViewDir</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">worldPos</span><span class="p">));</span>

	<span class="n">fixed3</span> <span class="n">R</span> <span class="o">=</span> <span class="n">reflect</span><span class="p">(</span><span class="o">-</span><span class="n">V</span><span class="p">,</span><span class="n">N</span><span class="p">);</span>

	<span class="c1">//col = texCUBE(_Cubemap,R);</span>

	<span class="c1">//return col;</span>

	<span class="c1">//反射探针支持</span>
	<span class="n">col</span> <span class="o">=</span> <span class="n">UNITY_SAMPLE_TEXCUBE</span><span class="p">(</span><span class="n">unity_SpecCube0</span><span class="p">,</span><span class="n">R</span><span class="p">);</span>
	<span class="n">half3</span> <span class="n">skyColor</span> <span class="o">=</span> <span class="n">DecodeHDR</span><span class="p">(</span><span class="n">col</span><span class="p">,</span><span class="n">unity_SpecCube0_HDR</span><span class="p">);</span>

	<span class="k">return</span> <span class="nf">fixed4</span><span class="p">(</span><span class="n">skyColor</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="err">}</span>
</code></pre></div></div>

<h2 id="八gpu-instance">八、GPU Instance</h2>

<p><strong>1、Rendering Statistics Window面板参数</strong></p>

<p><img src="/img/in-post/ShaderTutor/status.png" alt="status" /></p>

<p>Audio就不看了</p>

<p>Graphics：</p>

<ul>
  <li>FPS：注意，这个数字只包括做帧更新和渲染游戏视图所花费的时间;它不包括在编辑器中绘制Scene视图、Inspector和其他只针对编辑器的处理所花费的时间</li>
  <li>CUP：main 0.9ms（主线程）</li>
  <li>render thread：GPU渲染线程处理图像所花费的时间，具体数值由GPU性能来决定</li>
  <li>Batch：<strong>批处理</strong>是指引擎试图将多个对象的渲染合并到一块内存中，以减少由于资源切换造成的CPU开销，Batches就是合并后的DrawCall次数</li>
  <li>Saved by batching：合并的批次数。为了确保良好的批处理，您通常应该尽可能在不同对象之间共享材质。更改渲染状态将会将批次破坏分解为具有相同状态的组</li>
  <li>Tris：三角面数</li>
  <li>Verts：顶点数</li>
  <li>Screen：屏幕分辨率、它的抗锯齿水平以及在显存中占用的大小</li>
  <li>SetPass calls：每次GPU切换一个Pass前，都会产生一次SetPassCall</li>
  <li>Shadow casters：表示场景中有多少个可以投射阴影的物体，一般这些物体都作为场景中的光源。</li>
  <li>Visible Skinned Meshes：所渲染的蒙皮网格的数量</li>
  <li>Animations：播放的动画数量</li>
</ul>

<p>补充：DrawCall：CPU每次调用图形API命令GPU渲染的操作</p>

<p><strong>2、合批（Batching）</strong></p>

<ul>
  <li><strong>动态合批</strong>：每一帧把可以进行批处理的模型网格进行合并，再把合并后的模型数据传递给GPU，然后使用同一个材质进行渲染。经过动态批处理的物体仍然可以移动，这是由于在处理每帧时Unity都会重新合并一次网格。多Pass的shader会中断批处理，在前向渲染中，我们有时需要使用额外的Pass为模型添加更多光照效果，这样模型就不会被批处理了
    <ul>
      <li>材质相同是合批的前提，但如果是材质实例的话，则一样无法合批</li>
      <li>支持不同网格的合批</li>
      <li>单个网格最多300个顶点，900个顶点属性（顶点属性的上限可能未来版本会调整）
        <ul>
          <li>如果Shader中用到了网格的position、normal和uv的话，则最多是300个顶点</li>
          <li>如果Shader中用到了网格的position、normal、uv0、uv1和tangent的话，则最多是180个顶点</li>
        </ul>
      </li>
      <li>镜像的transform无法合批（就是A的Scale是1，然后B的Scale是-1，就造成了镜像的transform）</li>
    </ul>
  </li>
  <li><strong>静态合批</strong>：它的实现原理是，只在运行开始阶段，把需要进行静态批处理的模型合并到一个新的网格结构中，这意味着这些模型不可以在运行时刻被移动。由于他只需要进行一次合并操作，因此比动态批处理更加高效。静态批处理需要占用更多的内存来存储合并后的几何结构
    <ul>
      <li>所有Mesh实例具有相同的材质引用</li>
      <li>所有Mesh必须标记为Static。做完这两件事静态合批就做好了（原理：会在内部重新合并所以的网格生成一个Mesh，占用内存的空间）</li>
      <li>静态合批和Shader没有关系</li>
      <li>显存额外的内存占用</li>
      <li>静态对象无法通过原始的Transform移动</li>
      <li>注意：像大规模的一个城市地图，不能用静态合批，因为如果只看到一个角落，但是处理器却把所以的城市都渲染出来了，占用了过多内存空间（看到的当前物体，所有和他与之合并的也会渲染，无论是否在摄像机的范围内。解决办法使用遮挡剔除）。总结就是：<strong>任何一点可见，全部渲染</strong></li>
      <li>场景
        <ul>
          <li>小场景：重复不多。美术在建模的时候把场景合并一起，这个时候导入静态合批会减少占用。优化好</li>
          <li>大场景：外部大部分是由动态合批（在不停的移动，显示的东西实时变化，原本占用的内存就高，静态后就会更高），局部小房间可以使用静态合批。大规模静态合批性价比不高</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><strong>3、GPU实例化（GPU Instance）</strong></p>

<p>与合批不同的是，GPU实例化要求网格、材质是一样的，材质属性可以不一样。</p>

<p>而且也不是所有平台都支持，比如手机端必须要OpenGL ES3.0以上才支持</p>

<p>获得GPU实例化需要</p>

<ul>
  <li>
    <p>硬件API支持</p>
  </li>
  <li>
    <p>Shader支持</p>

    <ul>
      <li>
        <p>在两个结构体里定义instanceID</p>

        <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">UNITY_VERTEX_INPUT_INSTANCE_ID</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>声明常量寄存器，并且在其中存储需要的变量属性</p>

        <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">UNITY_INSTANCING_BUFFER_START</span><span class="p">(</span><span class="n">prop</span><span class="p">)</span>
<span class="n">UNITY_DEFINE_INSTANCED_PROP</span><span class="p">(</span><span class="n">fixed4</span><span class="p">,</span> <span class="n">_Color</span><span class="p">)</span>	<span class="c1">//例如传入Color</span>
<span class="n">UNITY_INSTANCING_BUFFER_END</span><span class="p">(</span><span class="n">prop</span><span class="p">)</span> 
</code></pre></div>        </div>
      </li>
      <li>
        <p>在顶点着色器中设置相应的instanceID,默认的坐标变换就已经支持了</p>
      </li>
    </ul>

    <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">UNITY_SETUP_INSTANCE_ID</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p>把instanceID从顶点着色器传到片断着色器</p>

        <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">UNITY_TRANSFER_INSTANCE_ID</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">o</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>在片断着色器中设置相应的instanceID</p>

        <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">UNITY_SETUP_INSTANCE_ID</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>UNITY_ACCESS_INSTANCED_PROP,调用常量寄存器中的属性值</p>

        <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="n">UNITY_ACCESS_INSTANCED_PROP</span><span class="p">(</span><span class="n">prop</span><span class="p">,</span> <span class="n">_Color</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>源码：</p>

        <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Shader</span> <span class="s">"Burt/GPUInstance"</span>
<span class="p">{</span>
    <span class="n">Properties</span>
    <span class="p">{</span>
        <span class="n">_Color</span><span class="p">(</span><span class="s">"Color"</span><span class="p">,</span><span class="n">Color</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">SubShader</span>
    <span class="p">{</span>
        <span class="n">Tags</span> <span class="p">{</span> <span class="s">"RenderType"</span><span class="o">=</span><span class="s">"Opaque"</span> <span class="p">}</span>
    
        <span class="n">Pass</span>
        <span class="p">{</span>
            <span class="n">CGPROGRAM</span>
            <span class="cp">#pragma vertex vert
</span>            <span class="cp">#pragma fragment frag
</span>            <span class="cp">#pragma multi_compile_instancing
</span>    
            <span class="cp">#include "UnityCG.cginc"
</span>    
            <span class="k">struct</span> <span class="n">appdata</span>
            <span class="p">{</span>
                <span class="n">float4</span> <span class="n">vertex</span> <span class="o">:</span> <span class="n">POSITION</span><span class="p">;</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="c1">//在顶点着色器的输入定义instanceID</span>
                <span class="n">UNITY_VERTEX_INPUT_INSTANCE_ID</span>
            <span class="p">};</span>
    
            <span class="k">struct</span> <span class="n">v2f</span>
            <span class="p">{</span>
                <span class="n">float2</span> <span class="n">uv</span> <span class="o">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
                <span class="n">float4</span> <span class="n">pos</span> <span class="o">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
                <span class="n">float3</span> <span class="n">wPos</span><span class="o">:</span><span class="n">TEXCOORD4</span><span class="p">;</span>
                <span class="c1">//在顶点着色器的输出定义instanceID</span>
                <span class="n">UNITY_VERTEX_INPUT_INSTANCE_ID</span>
            <span class="p">};</span>
    
            <span class="c1">//声明常量寄存器，并且在其中存储需要的变量属性</span>
            <span class="n">UNITY_INSTANCING_BUFFER_START</span><span class="p">(</span><span class="n">prop</span><span class="p">)</span>
            <span class="n">UNITY_DEFINE_INSTANCED_PROP</span><span class="p">(</span><span class="n">fixed4</span><span class="p">,</span> <span class="n">_Color</span><span class="p">)</span>
            <span class="n">UNITY_INSTANCING_BUFFER_END</span><span class="p">(</span><span class="n">prop</span><span class="p">)</span> 
    
            <span class="n">v2f</span> <span class="n">vert</span> <span class="p">(</span><span class="n">appdata</span> <span class="n">v</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">v2f</span> <span class="n">o</span><span class="p">;</span>
                <span class="c1">//在顶点着色器中设置相应的instanceID,默认的坐标变换就已经支持了</span>
                <span class="n">UNITY_SETUP_INSTANCE_ID</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
                <span class="c1">//把instanceID从顶点着色器传到片断着色器</span>
                <span class="n">UNITY_TRANSFER_INSTANCE_ID</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">o</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">UnityObjectToClipPos</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">wPos</span> <span class="o">=</span> <span class="n">mul</span><span class="p">(</span><span class="n">unity_ObjectToWorld</span><span class="p">,</span><span class="n">v</span><span class="p">.</span><span class="n">vertex</span><span class="p">);</span>
                <span class="n">o</span><span class="p">.</span><span class="n">uv</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">uv</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">o</span><span class="p">;</span>
            <span class="p">}</span>
    
            <span class="n">fixed4</span> <span class="n">frag</span> <span class="p">(</span><span class="n">v2f</span> <span class="n">i</span><span class="p">)</span> <span class="o">:</span> <span class="n">SV_Target</span>
            <span class="p">{</span>
                <span class="c1">//在片断着色器中设置相应的instanceID</span>
                <span class="n">UNITY_SETUP_INSTANCE_ID</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                <span class="c1">//UNITY_ACCESS_INSTANCED_PROP,调用常量寄存器中的属性值</span>
                <span class="k">return</span> <span class="n">i</span><span class="p">.</span><span class="n">wPos</span><span class="p">.</span><span class="n">y</span><span class="o">*</span><span class="mi">0</span><span class="p">.</span><span class="mi">15</span><span class="o">+</span><span class="n">UNITY_ACCESS_INSTANCED_PROP</span><span class="p">(</span><span class="n">prop</span><span class="p">,</span> <span class="n">_Color</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">ENDCG</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>脚本支持</p>

    <ul>
      <li>
        <p>定义MaterialPropertyBlock变量a</p>
      </li>
      <li>
        <p>a.SetColor</p>
      </li>
      <li>
        <p>target.GetComponentInChildren<Renderer>().SetPropertyBlock(a)</Renderer></p>
      </li>
      <li>
        <p>源码：</p>

        <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>
    
<span class="k">public</span> <span class="k">class</span> <span class="nc">GPUInstanceScript</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">GameObject</span> <span class="n">prefabs</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="kt">int</span> <span class="n">acount</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="kt">int</span> <span class="n">range</span><span class="p">;</span>
    
    <span class="k">private</span> <span class="n">MaterialPropertyBlock</span> <span class="n">propertyBlock</span><span class="p">;</span>
    
    <span class="c1">// Start is called before the first frame update</span>
    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
    
        <span class="k">if</span> <span class="p">(</span><span class="n">propertyBlock</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="n">propertyBlock</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MaterialPropertyBlock</span><span class="p">();</span>
    
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span><span class="n">i</span><span class="p">&lt;</span> <span class="n">acount</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
        <span class="p">{</span>
            <span class="n">Vector3</span> <span class="n">newRange</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Vector3</span><span class="p">(</span><span class="n">Random</span><span class="p">.</span><span class="n">insideUnitSphere</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="n">range</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">Random</span><span class="p">.</span><span class="n">insideUnitSphere</span><span class="p">.</span><span class="n">z</span> <span class="p">*</span> <span class="n">range</span><span class="p">);</span>
            <span class="n">GameObject</span> <span class="n">go</span> <span class="p">=</span> <span class="nf">Instantiate</span><span class="p">(</span><span class="n">prefabs</span><span class="p">,</span> <span class="n">newRange</span><span class="p">,</span> <span class="n">prefabs</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">rotation</span><span class="p">);</span>
    
            <span class="n">Color</span> <span class="n">newColor</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Color</span><span class="p">(</span><span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">,</span> <span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">,</span> <span class="n">Random</span><span class="p">.</span><span class="k">value</span><span class="p">);</span>
    
            <span class="n">propertyBlock</span><span class="p">.</span><span class="nf">SetColor</span><span class="p">(</span><span class="s">"_Color"</span><span class="p">,</span> <span class="n">newColor</span><span class="p">);</span>
    
            <span class="n">go</span><span class="p">.</span><span class="n">GetComponentInChildren</span><span class="p">&lt;</span><span class="n">Renderer</span><span class="p">&gt;().</span><span class="nf">SetPropertyBlock</span><span class="p">(</span><span class="n">propertyBlock</span><span class="p">);</span>
    
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="九优化">九、优化</h2>

<p>对于一个游戏来说，它主要需要使用两种计算资源，CPU和GPU，他们会互相合作，来让我们游戏可以在预期的帧率和分辨率下工作。
所以，我们可以把造成游戏性能瓶颈的主要原因分成以下几个方面</p>

<ul>
  <li>CPU
    <ul>
      <li>过多的draw call</li>
      <li>复杂的脚本或者物理模拟</li>
    </ul>
  </li>
  <li>GPU
    <ul>
      <li>顶点处理
        <ul>
          <li>过多的顶点</li>
          <li>过多的逐顶点计算</li>
        </ul>
      </li>
      <li>片元处理
        <ul>
          <li>过多的片元：这部分优化重点在于减少overdraw，<strong>overdraw就是同一个像素被绘制了多次</strong></li>
          <li>过多的逐片元计算</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>带宽
    <ul>
      <li>使用了尺寸很大且未压缩的纹理</li>
      <li>分辨率过高的帧缓存</li>
    </ul>
  </li>
</ul>

<p>对于CPU来说，限制它的主要是每一帧中draw call的数目</p>

<p>draw  call简单来说就是CPU在每次通知GPU进行渲染之前，都需要提前准备好顶点数据（如位置，法线，颜色，纹理坐标等），然后调用一系列API把它们放到GPU可以访问的指定位置，最后调用一个绘制命令，而调用绘制命令时，就会产生一个draw call</p>

<p>过多的draw call会造成CPU的性能瓶颈</p>

<p>对于GPU来说，它负责整个渲染流水线，它从处理CPU传递过来的模型数据开始，进行顶点着色器，片元着色器等一系列工作，最后输出屏幕上的每个像素，因此CPU的性能瓶颈和需要处理的顶点数目，屏幕分辨率，显存等因素有关</p>

<p>相关的优化策略可以从减少处理的数据规模（包括顶点数目和片元数目），减少运算复杂度等方面入手</p>

<p>相对应的，就衍生出很多优化技术</p>

<ul>
  <li>CPU优化
    <ul>
      <li>使用批处理技术减少draw call数目</li>
    </ul>
  </li>
  <li>GPU优化
    <ul>
      <li>减少需要处理的顶点数目</li>
      <li>优化几何体</li>
      <li>使用遮挡剔除技术</li>
      <li>使用模型的LOD（多细节层次）技术</li>
      <li>减少需要处理的片元数目</li>
      <li>控制绘制顺序</li>
      <li>警惕透明物体：如果要得到正确的渲染结果，就必须从后往前渲染，就意味着，半透明物体几乎一定会造成overdraw</li>
      <li>减少实时光照和阴影
        <ul>
          <li>实时光照有可能提高draw call和overdraw，因为对于逐像素光源来说，被这些光源照亮的物体需要再渲染一次，无论是静态批处理还是动态批处理，对于这种额外处理逐像素光源的Pass都无法进行批处理，他们会中断批处理</li>
          <li>游戏中往往使用了烘焙技术，把光照提前烘焙到一张光照纹理中，然后运行是只需要根据纹理采样得到光照结果即可</li>
          <li>在移动平台上，一个物体使用的逐像素光源数目应小于1（不包括平行光），如果一定要使用更多实时光照，可以用逐顶点光照替代。阴影的处理同理。</li>
        </ul>
      </li>
      <li>减少计算复杂度</li>
      <li>使用Shader的LOD技术</li>
      <li>代码方面的优化</li>
    </ul>
  </li>
  <li>节省内存带宽
    <ul>
      <li>减少纹理大小</li>
      <li>利用分辨率缩放</li>
    </ul>
  </li>
</ul>

<p><strong>1、精度优化</strong></p>

<ul>
  <li>三种精度（从低到高）：
    <ul>
      <li>fixed：普通纹理、颜色类；8位</li>
      <li>half：HDR颜色、方向向量；16位</li>
      <li>float：位置坐标、纹理坐标；32位</li>
    </ul>
  </li>
</ul>

<p>实际上，使用的精度取决于目标平台和GPU</p>

<p>现在桌面级GPU都是直接采用float，Shader中的fixed/half/float最后都是用的float</p>

<p>现代移动端GPU大多仅支持half和float，所以能用half的就用half</p>

<p>fixed仅用于较旧的移动GPU</p>

<p><strong>2、能放顶点的计算就不要放片断中</strong></p>

<p><strong>3、少用多Pass</strong></p>

<p>一个subShader内如果含有多个Pass（不含Unity中特殊作用的），则会渲染多次，同时不能进行合批</p>

<p><strong>4、小心使用AlphaTest和ColorMask</strong></p>

<ul>
  <li>shader中使用了clip()函数通常在大多数平台上使用<strong>AlphaTest</strong>会有性能优势，但是在IOS和某些使用PowerVR GPU的Android设备上性能很低</li>
  <li><strong>ColorMask</strong>在IOS和部分Android设备上同样性能很低</li>
</ul>

<p><strong>5、NoScaleOffset</strong></p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">NoScaleOffset</span><span class="p">]</span><span class="n">_MainTex</span><span class="p">(</span><span class="s">"MainTex"</span><span class="p">,</span> <span class="mi">2</span><span class="n">D</span><span class="p">)</span> <span class="o">=</span> <span class="s">"white"</span> <span class="p">{}</span>
</code></pre></div></div>

<p>在不需要调节Tilling和Offset的贴图中加入[NoScaleOffset]，同时在shader不要做相关计算</p>

<p><strong>6、DiableBatching</strong></p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Tags</span><span class="p">{</span><span class="s">"DiableBatching"</span> <span class="o">=</span> <span class="s">"true"</span><span class="p">}</span>
</code></pre></div></div>

<p>true表示不进行合批</p>

<p>false表示能合批就合批，默认值</p>

<p>该指令同时影响动态合批和静态合批</p>

<p>如果顶点上的计算需要在模型的本地空间下进行，则需要开启，否则最好不要开启</p>

<p><strong>7、GrabPass</strong></p>

<p>消耗比较大</p>

<p>GrabPass如果不指定贴图名称，则每个对象的GrabPass都会每帧生成一次</p>

<p>GrabPass如果指定贴图名称，则所有对象的GrabPass在一帧内只会生成一次</p>

<p><strong>8、Overdraw</strong></p>

<p>Overdraw是重复绘制的意思，表示屏幕上的某个像素被绘制了多次，多发生在半透明物体叠加时</p>

<p><strong>9、变体优化</strong></p>

<p>变体的数量直接影响Shaderlab内存的占用，能少则少</p>

<p>尽量不要用内置的Standard材质，会生成大量的变体，可以自己修改定制一个</p>

<p>变体不是你加一条就多一条，而是你每加一条，就会有你新加的一条与旧变体的组合，例如：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma multi_compile A
</span><span class="c1">//A是旧的，B是新加的</span>
<span class="cp">#pragma multi_compile B
</span></code></pre></div></div>

<p>最后编译出来的变体就是：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span>
<span class="n">B</span>
<span class="n">A</span> <span class="n">B</span>
</code></pre></div></div>

<p>不是两个而是三个，更多的数量以此类推</p>

<ul>
  <li>第一种优化方式：自己从官方有的定义自己需要的</li>
  <li>第二种优化方式：skip掉不需要的</li>
</ul>

<p><strong>尽量少用multi_compile</strong></p>

<p><strong>尽量用shader_feature</strong>，shader有个指令是skip unused shader_feature，可以通过这个来减少变体。这样做该变体被使用才激活；如果一个都没激活，那么就仅有最新定义的被激活。而multi_compile不在skip的范围</p>

<p>假如要用程序动态修改，那只能用multi_compile</p>

<p>总结：</p>

<ul>
  <li>美术资源开关：shader_feature</li>
  <li>程序动态修改：multi_compile</li>
</ul>

<p>变体收集器（Shader Variant Collection）：</p>

<p>假如没有<strong>变体收集器</strong>，程序修改变体需要动态编译，假如变体太多会造成卡顿；所以事先用<strong>变体收集器</strong>收集起来吗，在加载时加进内存，这样就不用动态编译，直接拿过来用即可</p>

<p><strong>10、Shader Model</strong></p>

<p>由微软提出，要求显卡厂商按SM级别提供对应的功能与指令支持</p>

<p>不同的SM包含不同的指令集与Shader规范</p>

<p>高版本的SM是低版本的超集</p>

<p>例如：</p>

<div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma target 3.0	//shader编译目标级别
#pragma require xxx	//表明shader需要的特性功能
</span></code></pre></div></div>

<p>详细去看shader参考大全</p>

<p><strong>11、共享材质</strong></p>

<p>如果两个材质之间只有使用的纹理不同，我们可以把这些纹理合并到一张更大的纹理中，这张更大的纹理叫做图集（Atlas），一旦使用了同一张纹理，我们就可以使用同一个材质，再使用不同的采样坐标对纹理采样即可。</p>

<p>有时不同的物体在材质上还有一些微小的参数变化，例如颜色不同，某些浮点属性不同，但是，不管动态批处理还是静态批处理，他们前提都是要使用同一个材质，也就是说<strong>他们指向的材质必须是同一个实体</strong>。</p>

<p>我们可以把想要调整的参数存入网格顶点数据，例如，森林场景中所有的树使用了同一种材质，我们希望他们可以通过批处理来减少draw call，但是不同树的颜色可能不同，这是我们可以使用网格的顶点颜色数据进行调整。</p>

<p><strong>12、移动设备优化要点</strong></p>

<ul>
  <li>最小的Draw call
    <ul>
      <li>只要有任何一次Materia或者Shader发生改变那么就会触发Drawcall触发渲染状态（Render State）的改变—-》（如果有几十个个箱子但是他们的材质和Shader一样那么只会触发一次Drawcall）</li>
      <li>尽可能的合并材质贴图和Shader的使用，降低Drawcall</li>
    </ul>
  </li>
  <li>最小的材质数量</li>
  <li>最下的纹理尺寸</li>
  <li>方形&amp;POT纹理</li>
  <li>Shader中尽可能低的数据类型</li>
  <li>避免AlphaTest</li>
</ul>

<h2 id="十pbr">十、PBR</h2>

<p>Physically Based Rendering，中文译为基于物理的渲染</p>

<p>PBR是一种渲染方式，是使用基于物理原理和微平面理论的光照模型，以及使用从现实中测量的表面参数来准确表示真实世界材质的渲染理念</p>

<p>PBR是一系列技术的集合，包含GI、PBS等</p>

<p><strong>1、PBS（Physically Based Shadering）</strong></p>

<p>中文译为基于物理的着色</p>

<p>PBS是为了对光和材质之间进行更加真实的建模，实质上讲解基于物理的渲染本质就是PBS</p>

<p>核心理论：</p>

<ul>
  <li>物质的光学特性（Substance Optical Properties）
    <ul>
      <li>现实世界中的物质根据导电性可分为三大类：绝缘体、半导体、导体</li>
      <li>渲染领域中大多分为两大类：导体（金属）、绝缘体（非金属）</li>
      <li>金属
        <ul>
          <li>具有很高的反射率（&gt;=0.5）</li>
          <li>会立即吸收任何折射光，因此金属不会出现任何次表面散射和透明效果</li>
          <li>所有可见颜色都来自反射</li>
          <li><img src="/img/in-post/ShaderTutor/metal.png" alt="metal" /></li>
        </ul>
      </li>
      <li>非金属：
        <ul>
          <li>具有很低的反射率（&lt;=0.06）</li>
          <li>产生高光反射与漫反射现象</li>
          <li>非金属的高光反射为单色/灰色</li>
          <li><img src="/img/in-post/ShaderTutor/nonMetal.png" alt="nonMetal" /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>微平面理论（Microfacet Theory）
    <ul>
      <li>现实世界的表面大多都不是光学平滑的，这种微观几何上的变化会导致每个表面点对光有不同的反射和折射</li>
      <li>所以基于物理渲染的PBS技术都是基于微平面理论的，它假想任何平面都是由微平面组成的，根据这些微平面粗糙程度的不同，采用粗糙度贴图或者高光度贴图来进行表示</li>
      <li>一个平面越是粗糙，这个平面上的微平面排列就越是混乱</li>
    </ul>
  </li>
  <li>能量守恒（Energy Conservation）
    <ul>
      <li>出射光线的能量永远不能超过入射光线的能量（自发光除外）</li>
      <li>也就是：镜面反射 + 漫反射 &lt;= 入射光</li>
      <li>随着粗糙度的上升，镜面反射区域的面积会增加，基于能量守恒，故镜面反射区域的亮度则会降低</li>
    </ul>
  </li>
  <li>菲涅尔反射：
    <ul>
      <li>是一种表示看到光线的反射率与视角相关的现象</li>
      <li>也就是：光源入射方向与平面法线方向夹角的对应关系。</li>
      <li>夹角越大，反射越大，亮度也越大</li>
      <li>反之夹角越小，反射就越小，亮度也就越小</li>
    </ul>
  </li>
  <li>线性空间光照：为了保证光照渲染的正确性，所以最好是在线性（linear）空间中进行操作与计算，这样才能尽最大的还原现实世界中光与物质的交互
    <ul>
      <li><img src="/img/in-post/ShaderTutor/space1.png" alt="space" /></li>
    </ul>
  </li>
</ul>

<p><strong>2、双向反射分布函数BRDF</strong></p>

<p>这是一个渲染方程，描述了光能在场景中的流动，根据光的物理学原理，渲染方程可以完美的模拟出符合物理光学的结果</p>

<p>$L_{o} =L_{e} + \int_{Ω} f_{r} * L_{i} <em>(w_{i}</em>n) * dw_{i} $</p>

<p>其中：</p>

<ul>
  <li>L<sub>o</sub> 是当前点的出射光亮度</li>
  <li>L<sub>e</sub> 是当前点的自发光亮度</li>
  <li>f<sub>r</sub> 是当前点的入射方向到出射方向光的反射比例，为BxDF</li>
  <li>L<sub>i</sub> 是当前点的入射光角度</li>
  <li>(w<sub>i</sub> * n) 是入射角带来的入射光衰减</li>
  <li>$\int_{Ω}…dw_{i}$ 是入射方向半球的积分，可以理解为无穷小的累加和</li>
</ul>

<p><img src="/img/in-post/ShaderTutor/BSSRDF.png" alt="BSSRDF" /></p>

<p>其中：</p>

<ul>
  <li>BSSRDF：双向表面散射反射分布函数</li>
  <li>BRDF：双向反射分布函数。也就是上图负责黑块上面的区域的函数，是这一节学习的重点</li>
  <li>BTDF：双向透射分布函数。也就是上图负责黑块下面的区域的函数</li>
  <li>BSDF：双向散射分布函数。BSDF = BRDF + BTDF</li>
</ul>

<p><strong>迪斯尼原则的BRDF</strong></p>

<p>核心理念：</p>

<ul>
  <li>使用直观的参数，而不是晦涩的物理类参数</li>
  <li>参数尽可能的少</li>
  <li>参数在其合理范围内应该为0-1</li>
  <li>允许参数在有意义的情况下超出正常的范围</li>
  <li>所有参数组应尽可能的健壮与合理</li>
</ul>

<p>参数：</p>

<p><img src="/img/in-post/ShaderTutor/desiny.png" alt="desiny" /></p>

<p>其中：</p>

<ol>
  <li>BaseColor（固有色，图中没有，这是最基础的属性）：表面的颜色，通常由纹理提供</li>
  <li>Subsurface（次表面）：使用次表面近似的控制漫反射形状</li>
  <li>Metallie（金属度）：0 = 非金属，1 = 金属，这是两种不同模型之间的线性混合</li>
  <li>Specular（镜面反射强度）：镜面反射的强度</li>
  <li>SpecularTint（镜面反射颜色）：对美术控制的让步，用于对BaseColor的入射镜面反射进行颜色控制</li>
  <li>Roughness（粗糙度）：表面粗糙度，控制漫反射和镜面反射</li>
  <li>Anisotropic（各向异性强度）：用于控制镜面反射高光的纵横比，0 = 各向同性，1 = 各向异性</li>
  <li>Sheen（光泽度）：一种额外的掠射分量，主要用于布料</li>
  <li>SheenTint（光泽颜色）：对Sheen的颜色控制</li>
  <li>ClearCoat（清漆强度）：特殊用途的第二个镜面波瓣</li>
  <li>ClearCoatCloss（清漆光泽度）：控制透明涂层光泽度</li>
</ol>

<p><strong>Gamma与Linnear</strong></p>

<p>因为：</p>

<p><img src="/img/in-post/ShaderTutor/space2.png" alt="spcae2" /></p>

<p>所以：</p>

<p><img src="/img/in-post/ShaderTutor/space3.png" alt="space3" /></p>

<p>有了最左边的校正，结果：</p>

<p><img src="/img/in-post/ShaderTutor/space4.png" alt="space4" /></p>

<hr />

<p>to be continued</p>

:ET