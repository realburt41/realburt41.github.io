I"S<h4 id="1堆和栈的区别">1.堆和栈的区别</h4>

<ul>
  <li>栈：由编译器自动分配、释放。在函数体中定义的变量通常在栈上。存放值类型。</li>
  <li>堆：一般由程序员分配释放。用new等分配内存函数分配得到的就是在堆上。存放引用类型。</li>
</ul>

<h4 id="2const和readonly区别">2.const和readonly区别</h4>

<ul>
  <li>const 字段只能在该字段的声明中初始化，且不允许在常数声明中使用 static 修饰符。</li>
  <li>readonly 字段可以在声明或构造函数中初始化。因此，根据所使用的构造函数</li>
</ul>

<h4 id="3委托事件">3.委托、事件</h4>

<p>委托类似于 C++ 函数指针，但它是类型安全的</p>

<p>委托可以把一个方法作为参数代入另一个方法，允许将方法作为参数进行传递</p>

<p>委托可以理解为指向一个函数的引用</p>

<p>事件是一种特殊的委托</p>

<h4 id="4序列化">4.序列化</h4>

<p>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据。</p>

<h4 id="5ref与out关键字">5.ref与out关键字</h4>

<ul>
  <li>ref：ref 关键字使参数按引用传递。其效果是，当控制权传递回调用方法时，在方法中对参数所做的任何更改都将反映在该变量中</li>
  <li>out关键字会导致参数通过引用来传递。这与 ref 关键字类似，不同之处在于 ref 要求变量必须在传递之前进行初始化</li>
</ul>
:ET